// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ITUdatabaseClient is the client API for ITUdatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITUdatabaseClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (ITUdatabase_JoinClient, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Ack, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Ack, error)
}

type iTUdatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewITUdatabaseClient(cc grpc.ClientConnInterface) ITUdatabaseClient {
	return &iTUdatabaseClient{cc}
}

func (c *iTUdatabaseClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (ITUdatabase_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &ITUdatabase_ServiceDesc.Streams[0], "/ITUdatabase/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &iTUdatabaseJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ITUdatabase_JoinClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type iTUdatabaseJoinClient struct {
	grpc.ClientStream
}

func (x *iTUdatabaseJoinClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iTUdatabaseClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/ITUdatabase/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iTUdatabaseClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/ITUdatabase/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ITUdatabaseServer is the server API for ITUdatabase service.
// All implementations must embed UnimplementedITUdatabaseServer
// for forward compatibility
type ITUdatabaseServer interface {
	Join(*JoinRequest, ITUdatabase_JoinServer) error
	Publish(context.Context, *PublishRequest) (*Ack, error)
	Leave(context.Context, *LeaveRequest) (*Ack, error)
	mustEmbedUnimplementedITUdatabaseServer()
}

// UnimplementedITUdatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedITUdatabaseServer struct {
}

func (UnimplementedITUdatabaseServer) Join(*JoinRequest, ITUdatabase_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedITUdatabaseServer) Publish(context.Context, *PublishRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedITUdatabaseServer) Leave(context.Context, *LeaveRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedITUdatabaseServer) mustEmbedUnimplementedITUdatabaseServer() {}

// UnsafeITUdatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITUdatabaseServer will
// result in compilation errors.
type UnsafeITUdatabaseServer interface {
	mustEmbedUnimplementedITUdatabaseServer()
}

func RegisterITUdatabaseServer(s grpc.ServiceRegistrar, srv ITUdatabaseServer) {
	s.RegisterService(&ITUdatabase_ServiceDesc, srv)
}

func _ITUdatabase_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ITUdatabaseServer).Join(m, &iTUdatabaseJoinServer{stream})
}

type ITUdatabase_JoinServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type iTUdatabaseJoinServer struct {
	grpc.ServerStream
}

func (x *iTUdatabaseJoinServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ITUdatabase_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUdatabaseServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ITUdatabase/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUdatabaseServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ITUdatabase_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ITUdatabaseServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ITUdatabase/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ITUdatabaseServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ITUdatabase_ServiceDesc is the grpc.ServiceDesc for ITUdatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ITUdatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ITUdatabase",
	HandlerType: (*ITUdatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ITUdatabase_Publish_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ITUdatabase_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _ITUdatabase_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}
